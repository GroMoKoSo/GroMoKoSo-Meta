openapi: 3.0.4
info:
  title: User Management API
  version: 1.0.0
  description: API for managing Users and Groups including adding new Users/groups and deleting existing ones.
servers:
  - url: ??
paths:
  /users:
    get:
      summary: Get all Users.
      description: Returns a list of all Users.
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: An general purpose query to search for an user by his attributes
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a new User
      description: Create a new User and persist it's data.
      requestBody:
        required: true
        description: User data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}:
    parameters:
      - in: path
        name: username
        description: Unique identifier of the User.
        required: true
        schema:
          type: string

    get:
      summary: Get a User.
      description: Returns a User which has the given username.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Edit a User.
      description: Edit the attributes of a User which has the given username.
      parameters:
        - in: query
          name: user
          required: true
          schema:
            $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a User.
      description: Deletes a User with the specified username.
      responses:
        "204":
          description: User successfully deleted; no content returned.
        "404":
          description: User not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/apis:
    parameters:
      - in: path
        name: username
        description: Unique identifier of the User.
        required: true
        schema:
          type: string

    get:
      summary: Get the Api Id's belonging to a User.
      description: Returns a array of Api Id's belonging to the User which has the given username.
      parameters:
        - in: query
          name: isActivated
          description: Whether only Api Ids should be returned which are set as activated for the user.
          schema:
            type: boolean
            default: false
        - in: query
          name: groupApis
          description: Whether Api Ids should be returned which the user has only access to because of the groups he belongs to.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiAccessList"
        "404":
          description: User not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a new Api Id to a User.
      description: Add a new Api Id to a User.
      requestBody:
        description: API data.
        content:
          application/json:
            schema:
              type: integer
              description: Api Id of the new Api.
              required: true
      responses:
        "201":
          description: Api successfully added.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/apis/{api_id}:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Unique identifier of the User.
      - in: path
        name: api_id
        required: true
        schema:
          type: integer
        description: Unique identifier of the Api which should be deleted from the User.

    delete:
      summary: Delete a Api Id from a User.
      description: Deletes a Api Id from a User with the specified username.
      responses:
        "204":
          description: Api Id successfully deleted; no content returned.
        "404":
          description: User or Api Id not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{username}/groups:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Unique identifier of the User.

    get:
      summary: Get all Groups of which the User is a Member and his corresponding role.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupWithRoleList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /groups:
    get:
      summary: Get all Groups.
      description: Returns a list of all Groups.
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: An general purpose query to search for an group by his attributes
          example: name=MyGroupName
        - in: query
          name: accessibility
          schema:
            type: string
            description: Whether the API should return public groups or all groups. All groups will only be returned if the caller is an admin.
            default: all
            example: public
            enum:
              - all
              - public
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupList"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a new Group.
      description: Create a new Group and persist it's data.
      requestBody:
        required: true
        description: Group data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        "201":
          description: Group successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groups/{name}:
    parameters:
      - in: path
        name: name
        description: Unique identifier of the Group.
        required: true
        schema:
          type: string

    get:
      summary: Get a Group.
      description: Returns a Group which has the given name.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          description: Group not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Edit a Group.
      description: Edit the attributes of a Group which has the given name.
      parameters:
        - in: query
          name: group
          required: true
          schema:
            $ref: '#/components/schemas/Group'
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "404":
          description: Group not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a Group.
      description: Deletes a Group with the specified name.
      responses:
        "204":
          description: Group successfully deleted; no content returned.
        "404":
          description: Group not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groups/{name}/users:
    parameters:
      - in: path
        name: name
        description: Unique identifier of the Group.
        required: true
        schema:
          type: string

    get:
      summary: Get the Users belonging to a Group.
      description: Returns a array of Users belonging to the Group which has the given name.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithGroupRoleList"
        "404":
          description: Group not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a new User to a Group.
      description: Add a new User to a Group by providing the Users unique Identifier.
      requestBody:
        description: User data.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithGroupRole"
      responses:
        "201":
          description: User successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithGroupRole"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groups/{name}/users/{username}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
        description: Unique identifier of the Group.
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: Unique identifier of the User which should be deleted from the Group.

    delete:
      summary: Delete a User from a Group.
      description: Deletes a User, which has the given username, from a Group with the specified name.
      responses:
        "204":
          description: User successfully deleted; no content returned.
        "404":
          description: Group or User not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groups/{name}/apis:
    parameters:
      - in: path
        name: name
        description: Unique identifier of the Group.
        required: true
        schema:
          type: string

    get:
      summary: Get the Api Id's belonging to a Group.
      description: Returns a array of Api Id's belonging to the Group which has the given name.
      parameters:
        - in: query
          name: isActivated
          description: Whether only Api Ids should be returned which are set as activated for the group, default value = false.
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiAccessList"
        "404":
          description: Group not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Add a new Api Id to a Group.
      description: Add a new Api Id to a Group.
      requestBody:
        description: API data.
        content:
          application/json:
            schema:
              type: integer
              description: Api Id of the new Api
              required: true
      responses:
        "201":
          description: Api successfully added.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /groups/{name}/apis/{api_id}:
    parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
        description: Unique identifier of the Group.
      - in: path
        name: api_id
        required: true
        schema:
          type: integer
        description: Unique identifier of the Api which should be deleted from the Group.

    delete:
      summary: Delete a Api Id from a Group.
      description: Deletes a Api Id from a Group with the specified name.
      responses:
        "204":
          description: Api Id successfully deleted; no content returned.
        "404":
          description: Group or Api Id not found.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    User:
      type: object
      properties:
        userName:
          type: string
          description: unique identifier of the User.
          example: user12345
        firstName:
          type: string
          description: First name of the User.
          example: John
        lastName:
          type: string
          description: Last name of the User.
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        systemRole:
          type: string
          example: Member
          enum:
            - Member
            - Admin
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserWithGroupRole:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        role:
          enum:
            - Member
            - Editor
            - Admin
    UserWithGroupRoleList:
      type: array
      items:
        $ref: '#/components/schemas/UserWithGroupRole'
    Group:
      type: object
      properties:
        name:
          type: string
          description: unique identifier of the Group.
        description:
          type: string
          description: Description of the Group.
          example: This is a description of a group which contains a lot of useful information.
        visibility:
          type: string
          description: Whether the group is private or public available.
          enum:
            - private
            - public
    GroupList:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    GroupWithRole:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        role:
          enum:
            - Member
            - Editor
            - Admin
    GroupWithRoleList:
      type: array
      items:
        $ref: '#/components/schemas/GroupWithRole'
    ApiId:
      type: integer
      description: Unique Identifier of an Api.
    ApiIdList:
      type: array
      items:
        $ref: '#/components/schemas/ApiId'
    ApiAccessList:
      type: array
      items:
        $ref: '#/components/schemas/ApiAccess'
    ApiAccess:
      type: object
      properties:
        apiId:
          type: integer
          description: Unique Identifier of an Api.
        accessVia:
          type: string
          description: Whether the access was granted to the user personally or via a membership of a group.
          enum:
            - user
            - group
        activated:
          type: boolean
          description: boolean which is indicating if the API is currently activated for the user / group.
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message