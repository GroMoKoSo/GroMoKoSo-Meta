openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8081
    description: Generated server url
tags:
  - name: Group Management
    description: All Endpoints related to manage groups.
  - name: User Management
    description: All Endpoints related to manage users.
paths:
  /users/{username}:
    get:
      tags:
        - User Management
      operationId: getUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Found User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSystemRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
    put:
      tags:
        - User Management
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
        required: true
      responses:
        "200":
          description: Updated User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSystemRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
    delete:
      tags:
        - User Management
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User was successfully deleted.
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
  /users/{username}/apis/{api_id}:
    put:
      tags:
        - User Management
      operationId: updateApiFromUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: api_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserToApiDto"
        required: true
      responses:
        "200":
          description: API ID for User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username or API ID
    delete:
      tags:
        - User Management
      operationId: deleteApiFromUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: api_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: API ID from User successfully deleted.
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username or API ID
  /groups/{name}:
    get:
      tags:
        - Group Management
      operationId: getGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Found Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
    put:
      tags:
        - Group Management
      operationId: updateGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupDto"
        required: true
      responses:
        "200":
          description: Updated Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
    delete:
      tags:
        - Group Management
      operationId: deleteGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Group was successfully deleted.
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
  /groups/{name}/users/{username}:
    put:
      tags:
        - Group Management
      operationId: updateUserFromGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserWithGroupRoleDto"
        required: true
      responses:
        "200":
          description: User from Group successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithGroupRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name or Username
    delete:
      tags:
        - Group Management
      operationId: deleteUserFromGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User from Group successfully deleted.
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name or Username
  /groups/{name}/apis/{api_id}:
    put:
      tags:
        - Group Management
      operationId: updateApiIdFromGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: api_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupToApiDto"
        required: true
      responses:
        "200":
          description: API ID for Group successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name or API ID
    delete:
      tags:
        - Group Management
      operationId: deleteApiIdFromGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: api_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: API ID from Group successfully deleted.
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name or API ID
  /users:
    get:
      tags:
        - User Management
      operationId: getUsers
      responses:
        "200":
          description: Successfully returned all Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithSystemRoleDto"
        "401":
          description: Not authorized to perform this request.
    post:
      tags:
        - User Management
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "200":
          description: Added new User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithSystemRoleDto"
        "401":
          description: Not authorized to perform this request.
        "422":
          description: Invalid Data in Payload
  /users/{username}/apis:
    get:
      tags:
        - User Management
      operationId: getApisFromUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
        - name: accessViaGroup
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        "200":
          description: API ID's of User successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
    post:
      tags:
        - User Management
      operationId: addApisToUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserToApiDto"
        required: true
      responses:
        "200":
          description: API ID for User successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
  /groups:
    get:
      tags:
        - Group Management
      operationId: getGroups
      responses:
        "200":
          description: Successfully returned all Groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupDto"
        "401":
          description: Not authorized to perform this request.
    post:
      tags:
        - Group Management
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupDto"
        required: true
      responses:
        "200":
          description: Added new Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401":
          description: Not authorized to perform this request.
        "422":
          description: Invalid Data in Payload
  /groups/{name}/users:
    get:
      tags:
        - Group Management
      operationId: getUsersOfGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: All Users of Group successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithGroupRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
    post:
      tags:
        - Group Management
      operationId: addUserToGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWithGroupRoleDto"
        required: true
      responses:
        "200":
          description: User successfully added to Group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithGroupRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
  /groups/{name}/apis:
    get:
      tags:
        - Group Management
      operationId: getApiIdsOfGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: API ID's of Group successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
    post:
      tags:
        - Group Management
      operationId: addApiIdToGroup
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupToApiDto"
        required: true
      responses:
        "200":
          description: API ID for Group successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupToApiDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Group name
  /users/{username}/groups:
    get:
      tags:
        - User Management
      operationId: getGroups_1
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: All Groups of User with their Role in the group successfully
            returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupWithGroupRoleDto"
        "401":
          description: Not authorized to perform this request.
        "404":
          description: Invalid Username
  /users/apis:
    get:
      tags:
        - User Management
      operationId: getAllApis
      responses:
        "200":
          description: Successfully returned all apis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserToApiDto"
        "401":
          description: Not authorized to perform this request.
components:
  schemas:
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        systemRole:
          type: string
          enum:
            - Member
            - Admin
          example: Member
    UserWithSystemRoleDto:
      type: object
      properties:
        userName:
          type: string
          example: user123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        systemRole:
          type: string
          enum:
            - Member
            - Admin
          example: Member
    UpdateUserToApiDto:
      type: object
      properties:
        active:
          type: boolean
          example: true
    UserToApiDto:
      type: object
      properties:
        apiId:
          type: integer
          format: int32
          example: 123
        accessVia:
          type: string
          description: Where the user got the access from. This is either 'user' or
            the name of the Group which grants the user access.
          example: user
        active:
          type: boolean
          example: true
    UpdateGroupDto:
      type: object
      properties:
        description:
          type: string
          example: This description contains a lot of useful information
        visibility:
          type: string
          enum:
            - Private
            - Public
          example: Public
    GroupDto:
      type: object
      properties:
        name:
          type: string
          example: MyFirstGroup
        description:
          type: string
          example: This description contains a lot of useful information
        visibility:
          type: string
          enum:
            - Private
            - Public
          example: Public
    UpdateUserWithGroupRoleDto:
      type: object
      properties:
        groupRole:
          type: string
          enum:
            - Member
            - Editor
            - Admin
          example: Admin
    UserWithGroupRoleDto:
      type: object
      properties:
        username:
          type: string
          example: user123
        groupRole:
          type: string
          enum:
            - Member
            - Editor
            - Admin
          example: Admin
    UpdateGroupToApiDto:
      type: object
      properties:
        active:
          type: boolean
          example: true
    GroupToApiDto:
      type: object
      properties:
        apiId:
          type: integer
          format: int32
          example: 123
        active:
          type: boolean
          example: true
    UserDto:
      type: object
      properties:
        userName:
          type: string
          example: user123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
    GroupWithGroupRoleDto:
      type: object
      properties:
        groupName:
          type: string
          example: MyFirstGroup
        role:
          type: string
          enum:
            - Member
            - Editor
            - Admin
          example: Editor
